#!/usr/bin/env python3
import sys

def vcf_to_23andme(vcf_file, output_file, version='v5'):
    """Converts VCF to 23andMe v3 or v5 format"""
    
    # Headers for different versions
    if version == 'v5':
        header = """# This data file generated by VCF to 23andMe converter
# This file contains raw genotype data, including data that is not used in 23andMe reports.
# This data has undergone a general quality review however only a subset of markers have been 
# individually validated for accuracy. As such, this data is suitable only for research, 
# educational, and informational use and not for medical or other use.
# 
# Below is a text version of your data. Fields are TAB-separated
# Each line corresponds to a single SNP. For each SNP, we provide its identifier 
# (an rsid or an internal id), its location on the reference human genome, and the 
# genotype call oriented with respect to the plus strand on the human reference sequence.
# Your data is formatted according to Human Genome build 37 (also known as Annotation Release 104).
# 
# rsid	chromosome	position	genotype
"""
    else:  # v3
        header = """# This file contains raw genotype data, including data that is not used in 23andMe reports.
# This data has undergone a general quality review however only a subset of markers have been 
# individually validated for accuracy. As such, this data is suitable only for research, 
# educational, and informational use and not for medical or other use.
# 
# rsid	chromosome	position	genotype
"""
    
    with open(vcf_file, 'r') as f_in, open(output_file, 'w') as f_out:
        # Write the header
        f_out.write(header)
        
        for line in f_in:
            # Skip VCF headers
            if line.startswith('#'):
                continue
            
            # Parse VCF line
            parts = line.strip().split('\t')
            if len(parts) < 10:
                continue
                
            chrom = parts[0].replace('chr', '')  # Remove 'chr' prefix
            pos = parts[1]
            rsid = parts[2]
            ref = parts[3]
            alt = parts[4]
            genotype = parts[9]
            
            # Convert genotype
            if genotype == '0/0':
                # Homozygous reference
                final_genotype = ref + ref
            elif genotype == '0/1' or genotype == '1/0':
                # Heterozygous
                final_genotype = ref + alt
            elif genotype == '1/1':
                # Homozygous alternative
                final_genotype = alt + alt
            else:
                # Unknown genotype
                final_genotype = '--'
            
            # Write in 23andMe format
            f_out.write(f"{rsid}\t{chrom}\t{pos}\t{final_genotype}\n")

# Usage
if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Usage: python vcf_to_23andme.py input.vcf output.txt [v3|v5]")
        sys.exit(1)
    
    input_file = sys.argv[1]
    output_file = sys.argv[2]
    version = sys.argv[3] if len(sys.argv) > 3 else 'v5'
    
    vcf_to_23andme(input_file, output_file, version)
    print(f"Conversion completed! File saved as {output_file}")